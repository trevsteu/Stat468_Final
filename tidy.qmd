---
title: "Tidy"
author: "Trevor S"
---

## Setup

We install and load the necessary packages, along with functions from prior chapters.

```{r, message = FALSE, warning = FALSE}
# install.packages("rvest")
# install.packages("tidyverse")
library(rvest)
library(tidyverse)
library(stringr)

source("functions.R") # load functions defined in prior chapters

start_year <- 1996
end_year <- 2020
```

## Introduction

In the Tidy step, we put the data into tidy form and clean it, which will make the data easier to analyze in the later steps. Despite the table from the previous chapter *looking* fairly clean, further inspection reveals some issues:

```{r, warning = FALSE}
import_draft(start_year)[23:30,]
```

Three problems that immediately come up are:

-   Two rows get inserted at the end of every round to indicate the round changed.

-   Numbers are being coded as strings (`overall`, `age`, `to`, etc).

-   (At least) one player is missing everything except for their pick number, name, team, position, nationality, and amateur team.

By doing a little bit of detective work with some of the other players with missing values elsewhere in the dataset, we notice that players who never played in the NHL have empty strings listed for everything except for the values attributes listed above. We will have to deal with this in the tidy step. Note that Hockey Reference begins listing player's ages in the 2001 draft, but we aren't going to use ages for our analysis so we won't bother coming up for a remedy for the players drafted between 1996 and 2000. The number of picks in the draft has also changed over the years, we will ignore any player drafted after selection 224 (the number of picks in the 2025 NHL Entry Draft). Finally, it would be helpful to remove the columns we don't care about.

## Code

We build a function to tidy the data. In particular, we want it to:

-   Remove the rows added between rounds.

-   Correct the types of each column so we can use numeric columns in calculations.

-   Change `gp` and `ps` values to `0` for players who never played in the NHL or have a negative `ps`.

-   If `is.na(to)`, then the player never played in the NHL, so set it to the draft year.

-   Add a `year` column so we can adjust the stats of players drafted more recently.

-   Select the columns we care about (`year`, `overall`, `pos`, `to`, `gp`, and `ps`) in that order.

-   Remove any players selected after $224^{\text{th}}$ overall.

Note that there were originally two `gp` columns (one for games played and one for games played as a goalie, goalies have the same number in both), but when we used `janitor::clean_names()` it changed them to `gp` and `gp_2`. Additionally, we cannot remove the round separating rows by removing a specified row number since many of the drafts in our dataset have different numbers of picks per round, and some rounds within the same draft have even had a different numbers of picks. Finally, we remove

```{r, warning = FALSE, message = FALSE}
tidy_draft <- function(year){
  draft_year_table <- import_draft(year) |> 
    filter(overall != "Overall" & overall != "" & as.numeric(overall) < 225) |> # remove extra rows and players after pick 224
    type_convert() |> # fix types 
    mutate("year" = year, "ps" = pmax(coalesce(ps, 0), 0), 
           "gp" = coalesce(gp, 0), "to" = coalesce(to, year)) |> 
    select(year, overall, to, pos, gp, ps) # columns we care about
  draft_year_table
}

tidy_draft(1996)
```

This is the form we will use for analysis later. We now load in all of the data and use `rbind()` to bind the tables together, giving us a single data frame to work with. This also means that our data will be in long format, since every row is one player selected. Note that this function takes around 4 minutes to run (because of the `Sys.sleep(10)` line, which is necessary to prevent us getting rate limited). Note that I sent `cache=TRUE` on this chunk to speed up the rendering time.

```{r, warning=FALSE, message=FALSE, eval = FALSE}
all_data <- do.call(rbind, lapply(seq(start_year, end_year, 1),
                   \(x) tidy_draft(x)))
```

```{r, message=FALSE, echo=FALSE, warning=FALSE}
all_data <- read.csv("all_data.csv")

# I'm cheating here because tidy_draft will take a long time to run and render
```

We can check that this data has loaded correctly, there should be between 5000 and 6000 rows (the number of picks in a draft has changed over the years, but is usually between 200 and 240, so 25 drafts will be between 5000 and 6000) and 6 columns:

```{r}
dim(all_data) # confirm there are 5000-6000 rows and 6 columns

length(unique(all_data$year)) # confirm all 25 years have been included

head(all_data, 10)
```

These checks all returned what they should. Finally, recall that the `import_data` function (and thus the `tidy_draft` function both take quite a while to run, especially when importing data from a large number of years. To resolve this issue, we create a csv file to store the data so future chapters can pull data from the csv file instead of having to get it from Hockey Reference again.

```{r, eval = FALSE}
write.csv(all_data, "all_data.csv")
```

In future chapters, we will import data from this csv file to speed up the run and rendering times (instead of importing it from Hockey Reference every time we simply load it from the csv). Now we proceed to the Visualize step.
