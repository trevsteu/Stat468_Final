---
title: "Transform"
author: "Trevor S"
---

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(tidyverse)
library(stringr)
install.packages("gt")
library(gt)
```

## Setup

```{r,  message = FALSE, warning = FALSE}
# install.packages("tidyverse")
# install.packages("dplyr")
library(tidyverse)
library(dplyr)


source("functions.R") # load functions defined in prior chapters

all_data <- read.csv("all_data.csv")
```

Right now this is just a bunch of EDA that I think is interesting. I will condense it and give it a logical flow later.

## Introduction

Now that we have our data imported and cleaned, we need to transform the data before modelling and visualizing it. In particular, we wish to come up with a way of utilizing the `ps` and `gp` values in such a way that does not punish players who are still playing (and thus haven't had as many seasons to increase their point share and games played.

```{r}
pick_prop <- all_data |> 
  group_by(year) |> 
  mutate(draft_gp = sum(gp), 
         draft_ps = sum(ps), 
         prop_gp = gp / draft_gp, 
         prop_ps = ps / draft_ps) |> 
  group_by(overall) |> 
  summarize(avg_prop_gp = mean(prop_gp), 
            avg_prop_ps = mean(prop_ps),
            .groups = "drop")

gp_scale <- 1000 / pick_prop[[1,2]]
ps_scale <- 1000 / pick_prop[[1,3]]

pick_prop[2] <- pick_prop[[2]] * gp_scale
pick_prop[[3]] <- pick_prop[[3]] * ps_scale

pick_prop_graph <- pivot_longer(pick_prop, cols = starts_with("avg"))
  
ggplot(pick_prop_graph, aes(x = overall, y = value)) +
  geom_point() + 
  geom_vline(xintercept = 30) + 
  geom_smooth(formula = y ~ log(x)) + 
  facet_wrap(~name)
```

```{r}
pick_vals <- all_data |> 
  group_by(overall) |> 
  summarize(avg_gp = mean(gp), 
            avg_ps = mean(ps),
            .groups = "drop")

est_val_gp <- rep(0, times = nrow(pick_vals))
est_val_ps <- rep(0, times = nrow(pick_vals))

for(i in 1:nrow(pick_vals)){
  k <- 2 * ceiling(sqrt(i))
  nearest <- which(abs(pick_vals$overall-i) <= (k %/% 2)+1)
  total_weight <- sum(pmin(1, 1/abs(i - nearest)^2))
  for(j in nearest){
    weight <- pmin(1/abs(i - j)^2, 1) / total_weight
    est_val_gp[i] <- est_val_gp[i] + weight * pick_vals$avg_gp[j]
    est_val_ps[i] <- est_val_ps[i] + weight * pick_vals$avg_ps[j]
  }
}

knn_model <- cbind(overall = seq(1, nrow(pick_vals), 1),
                   value_gp = est_val_gp, value_ps = est_val_ps)



```

Looking at these plots, there clearly appears to be an exponential pattern here. The games played and point share plots look quite similar, one noticeable difference is the point share one seems more spread out which makes sense since excellent players can have a significantly higher point share than good players, but they probably can't have significantly more games played.

```{r}
ggplot(knn_model, aes(x = overall, y = value_ps)) + 
  geom_point() + 
  geom_smooth(formula = y ~ log(x))

y <- knn_model[,2]
x <- knn_model[,1]

model <- lm(y ~ log(x))
summary(model)


value <- function(overall){
  model$coefficients[[1]] + model$coefficients[[2]]*log(overall)
}

value(1) - value(21) - value(27) - value(70)
```

```{r}
est_prop_gp <- rep(0, times = nrow(pick_prop))
est_prop_ps <- rep(0, times = nrow(pick_prop))

for(i in 1:nrow(pick_prop)){
  k <- floor(sqrt(pick_prop$overall[i]))
  nearest <- which(abs(pick_prop$overall-i) <= (k %/% 2)+1)
  total_weight <- sum(pmin(1, 1/abs(i - nearest)^2))
  for(j in nearest){
    weight <- pmin(1/abs(i - j), 1) / total_weight
    est_prop_gp[i] <- est_prop_gp[i] + weight * pick_prop$avg_prop_gp[j]
    est_prop_ps[i] <- est_prop_ps[i] + weight * pick_prop$avg_prop_ps[j]
  }
}

knn_model <- cbind(overall = seq(1, nrow(pick_prop), 1),
                   value_gp = est_prop_gp, value_ps = est_prop_ps)

ggplot(knn_model, aes(x = overall, y = value_ps)) + 
  geom_point() + 
  geom_smooth(formula = y ~ log(x))



model <- lm(knn_model[,3] ~ log(knn_model[,1]))

value <- function(pick){
  model$coefficients[[1]] + model$coefficients[[2]]*log(pick)            
}

value(1)
```

```{r}
ggplot(all_data, aes(x = gp)) + 
  geom_density()
ggplot(all_data, aes(x = ps)) + 
  geom_density()
```

```{r}
cor(all_data$gp, all_data$ps)

ggplot(all_data, aes(x = gp, y = ps, col = ifelse(pos=="G", "G", 
                                                  ifelse(pos=="D", "D", "F")))) + 
  geom_point()
```

## EDA

First, we perform some EDA to get a feel for what our data looks like. First, we want to see how many players never made the NHL (ie `gp = 0`), how many only played in a few games (we'll arbitrarily say this is 50 games, just over half of an 82 game season), and how many played in over 500 games.

```{r}
player_games <- all_data |> 
  mutate(none = ifelse(gp == 0, 1, 0), 
         few = ifelse(gp > 0 & gp <= 50, 1, 0),
         many = ifelse(gp >= 500, 1, 0))

rates <- c(sum(player_games$none) / nrow(player_games),
           sum(player_games$few) / nrow(player_games), 
           sum(player_games$many / nrow(player_games)))

rates
```

We can see that a significant portion of our dataset never played in an NHL game or only played in a few games. Let's look at this by year:

```{r}
player_games <- player_games |> 
  group_by(year) |> 
  summarize(across(none:many, sum))

```

see how many players we have that have played in at least 1 NHL game and are not retired. This is equivalent to `gp >= 1` and `to == 2025` (recall when we noted in the first chapter that players who are still playing have a `to` value of `2025`.

```{r}
all_data |> 
  filter(gp >= 1 & to == 2025) |> 
  nrow()
```

There are 742 such players (about 13% of our dataset) who meet this criteria, and who we will have to adjust the `ps` and `gp` values for. We can see in the plot below that (unsurprisingly) most of these players were drafted recently.

```{r}
player_adj <- all_data |> 
  filter(gp == 0) |>
  group_by(year) |> 
  summarize(n = n())

year_stats <- all_data |> 
  group_by(year) |> 
  summarize(total_gp = sum(gp), total_ps = sum(ps))

ggplot(player_adj, aes(x = year, y = n)) +
  geom_point() + 
  labs(title = "Number of Current Players Drafted by Year", 
       x = "Draft Year", y = "Number of Players")

ggplot(year_stats, aes(x = year, y = total_gp)) + 
  geom_point()
ggplot(year_stats, aes(x = year, y = total_ps)) + 
  geom_point()
```

```{r}
est_gp <- rep(0, times = length(unique(all_data$overall)))
est_ps <- rep(0, times = length(unique(all_data$overall)))

for(i in 1:length(unique(all_data$overall))){
  k <- floor(sqrt(i))
  nearest <- which(abs(seq(1, length(unique(all_data$overall)), 1) - i) <= (k %/% 2)+1)
  total_weight <- sum(pmin(1, 1/abs(i - nearest)))
  for(j in nearest){
    weight <- pmin(1/abs(i - j), 1) / total_weight
    est_gp[i] <- est_gp[i] + weight * all_data$gp[j]
    est_ps[i] <- est_ps[i] + weight * all_data$ps[j]
  }
}

knn_model <- data.frame(overall = seq(1, length(est_gp), 1),
                   value_gp = est_gp, value_ps = est_ps)

ggplot(knn_model, aes(x = overall, y = value_ps)) +
  geom_point()


new_model <- nls(value_ps ~ SSlogis(log(overall), phi1, phi2, phi3), data = knn_model)

pred_data <- data.frame(overall = seq(1, 224))
predicted_vals <- predict(new_model, pred_data)

pred_data <- mutate(pred_data, value_ps = predicted_vals)

ggplot(pred_data, aes(x = overall, y = value_ps)) + 
  geom_line(lwd = 1.5, col = "red") + 
  geom_point(data = knn_model)

value <- function(overall){
  coefs <- coef(new_model)
  coefs[[1]] / (1 + exp((coefs[[2]] - log(overall))/coefs[[3]]))
}

summary(new_model)
value(1)/value(224)
```

```{r}
est_gp <- rep(0, times = length(unique(pick_prop$overall)))
est_ps <- rep(0, times = length(unique(pick_prop$overall)))

for(i in 1:length(unique(pick_prop$overall))){
  k <- floor(sqrt(i))
  nearest <- which(abs(seq(1, length(unique(pick_prop$overall)), 1) - i) <= (k %/% 2)+1)
  total_weight <- sum(pmin(1, 1/abs(i - nearest)))
  for(j in nearest){
    weight <- pmin(1/abs(i - j), 1) / total_weight
    est_gp[i] <- est_gp[i] + weight * pick_prop$avg_prop_gp[j]
    est_ps[i] <- est_ps[i] + weight * pick_prop$avg_prop_ps[j]
  }
}

knn_model <- data.frame(overall = seq(1, length(est_gp), 1),
                   value_gp = est_prop_gp, value_ps = est_prop_ps)

ggplot(knn_model, aes(x = overall, y = value_ps)) +
  geom_point()


new_model <- nls(value_ps ~ SSlogis(log(overall), phi1, phi2, phi3), data = knn_model)

pred_data <- data.frame(overall = seq(1, 224))
predicted_vals <- predict(new_model, pred_data)

pred_data <- mutate(pred_data, value_ps = predicted_vals)

ggplot(pred_data, aes(x = overall, y = value_ps)) + 
  geom_point(data = knn_model) + 
  geom_line(lwd = 1.5, col = "red") + 
  geom_vline(xintercept = 25)

value <- function(overall){
  coefs <- coef(new_model)
  coefs[[1]] / (1 + exp((coefs[[2]] - log(overall))/coefs[[3]]))
}

value(1)/value(224)
```
