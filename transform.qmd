---
title: "Transform"
author: "Trevor S"
---

## Setup

We install and load the necessary packages, along with functions from prior chapters and `all_data`.

```{r,  message = FALSE, warning = FALSE}
# install.packages("tidyverse")
# install.packages("dplyr")
library(tidyverse)
library(dplyr)

source("functions.R") # load functions defined in prior chapters

all_data <- read.csv("all_data.csv")
```

## Introduction

In the transform step, we will transform our data to better include the careers of players who are still playing. In the previous chapter, we estimated the value of pick $n$ by taking the average points share of all players in out dataset drafted at pick $n$. One problem with this approach is that players drafted more recently will have had fewer years to generate points share. Indeed, the average points share is quite a bit lower for the drafts between 2016 and 2020:

```{r}
all_data |> 
  group_by(year) |> 
  summarize(avg_ps = mean(ps)) |>
  ggplot(aes(x = year, y = avg_ps)) +
  geom_point()
```

This will result in older drafts receiving more weight when we take the average, which is unideal because we'd like all drafts to be equally weighted to prevent outliers from receiving more weight than they should. To adjust this, we will change our metric *slightly*, and will instead use $p_{ij} = \frac{ps_{ij}}{\sum_i ps_{ij}}$, where $ps_{ij}$ is the points share of the player picked at selection $i$ in year $j$. In other words, we define $p_{ij}$ to be the *percentage* of the total points share generated by players drafted in year $j$ that player $i$ generated. We will then check that this gives a more even weight to each draft.

I would also add the weighted $k$-nearest neighbour part here too, and then leave the modelling part to be the nls stuff.

## Code

```{r}
all_data_prop <- all_data |> 
  group_by(year) |> 
  mutate(prop_ps = ps/sum(ps)) 


all_data_prop
```

Note that usually it is not advisable to take the mean of a bunch of ratios because it gives each ratio an equal weight. However, here it is appropriate because we want to give each draft an equal weight. We will recreate the same plot, but note that the only variation will come from the number of selections in a draft (since what we are plotting is literally $\frac{1}{\text{number of picks in draft}}$). Additionally, the scale on the $y$-axis shows that these values are basically all the same.

```{r}
all_data_prop |> 
  group_by(year) |> 
  summarize(avg_ps = mean(prop_ps)) |>
  ggplot(aes(x = year, y = avg_ps)) +
  geom_point()
```

In case you are not convinced that this approach is appropriate, we will still fit a model using the raw `ps` values in the Model step, the models will be quite similar.

```{r}
all_data_prop <- all_data_prop |> 
  group_by(overall) |>  
  summarize(avg_prop_ps = mean(prop_ps),
            .groups = "drop")
```
